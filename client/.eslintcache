[{"C:\\Users\\nicol\\bootcamp-class\\ur-rich-fsf-pt-05-2021-u-c\\21-MERN\\01-Activities\\26-Stu_Resolver-Context\\Solved\\client\\src\\index.js":"1","C:\\Users\\nicol\\bootcamp-class\\ur-rich-fsf-pt-05-2021-u-c\\21-MERN\\01-Activities\\26-Stu_Resolver-Context\\Solved\\client\\src\\App.js":"2","C:\\Users\\nicol\\bootcamp-class\\ur-rich-fsf-pt-05-2021-u-c\\21-MERN\\01-Activities\\26-Stu_Resolver-Context\\Solved\\client\\src\\reportWebVitals.js":"3","C:\\Users\\nicol\\bootcamp-class\\ur-rich-fsf-pt-05-2021-u-c\\21-MERN\\01-Activities\\26-Stu_Resolver-Context\\Solved\\client\\src\\pages\\SingleThought.js":"4","C:\\Users\\nicol\\bootcamp-class\\ur-rich-fsf-pt-05-2021-u-c\\21-MERN\\01-Activities\\26-Stu_Resolver-Context\\Solved\\client\\src\\pages\\Login.js":"5","C:\\Users\\nicol\\bootcamp-class\\ur-rich-fsf-pt-05-2021-u-c\\21-MERN\\01-Activities\\26-Stu_Resolver-Context\\Solved\\client\\src\\pages\\Signup.js":"6","C:\\Users\\nicol\\bootcamp-class\\ur-rich-fsf-pt-05-2021-u-c\\21-MERN\\01-Activities\\26-Stu_Resolver-Context\\Solved\\client\\src\\pages\\Home.js":"7","C:\\Users\\nicol\\bootcamp-class\\ur-rich-fsf-pt-05-2021-u-c\\21-MERN\\01-Activities\\26-Stu_Resolver-Context\\Solved\\client\\src\\pages\\Profile.js":"8","C:\\Users\\nicol\\bootcamp-class\\ur-rich-fsf-pt-05-2021-u-c\\21-MERN\\01-Activities\\26-Stu_Resolver-Context\\Solved\\client\\src\\components\\Header\\index.js":"9","C:\\Users\\nicol\\bootcamp-class\\ur-rich-fsf-pt-05-2021-u-c\\21-MERN\\01-Activities\\26-Stu_Resolver-Context\\Solved\\client\\src\\components\\Footer\\index.js":"10","C:\\Users\\nicol\\bootcamp-class\\ur-rich-fsf-pt-05-2021-u-c\\21-MERN\\01-Activities\\26-Stu_Resolver-Context\\Solved\\client\\src\\utils\\queries.js":"11","C:\\Users\\nicol\\bootcamp-class\\ur-rich-fsf-pt-05-2021-u-c\\21-MERN\\01-Activities\\26-Stu_Resolver-Context\\Solved\\client\\src\\utils\\auth.js":"12","C:\\Users\\nicol\\bootcamp-class\\ur-rich-fsf-pt-05-2021-u-c\\21-MERN\\01-Activities\\26-Stu_Resolver-Context\\Solved\\client\\src\\utils\\mutations.js":"13","C:\\Users\\nicol\\bootcamp-class\\ur-rich-fsf-pt-05-2021-u-c\\21-MERN\\01-Activities\\26-Stu_Resolver-Context\\Solved\\client\\src\\components\\CommentList\\index.js":"14","C:\\Users\\nicol\\bootcamp-class\\ur-rich-fsf-pt-05-2021-u-c\\21-MERN\\01-Activities\\26-Stu_Resolver-Context\\Solved\\client\\src\\components\\CommentForm\\index.js":"15","C:\\Users\\nicol\\bootcamp-class\\ur-rich-fsf-pt-05-2021-u-c\\21-MERN\\01-Activities\\26-Stu_Resolver-Context\\Solved\\client\\src\\components\\ThoughtForm\\index.js":"16","C:\\Users\\nicol\\bootcamp-class\\ur-rich-fsf-pt-05-2021-u-c\\21-MERN\\01-Activities\\26-Stu_Resolver-Context\\Solved\\client\\src\\components\\ThoughtList\\index.js":"17","C:\\Users\\nicol\\bootcamp-class\\live-chat-app\\client\\src\\index.js":"18","C:\\Users\\nicol\\bootcamp-class\\live-chat-app\\client\\src\\App.js":"19","C:\\Users\\nicol\\bootcamp-class\\live-chat-app\\client\\src\\reportWebVitals.js":"20","C:\\Users\\nicol\\bootcamp-class\\live-chat-app\\client\\src\\pages\\Login.js":"21","C:\\Users\\nicol\\bootcamp-class\\live-chat-app\\client\\src\\pages\\Home.js":"22","C:\\Users\\nicol\\bootcamp-class\\live-chat-app\\client\\src\\pages\\Signup.js":"23","C:\\Users\\nicol\\bootcamp-class\\live-chat-app\\client\\src\\pages\\Profile.js":"24","C:\\Users\\nicol\\bootcamp-class\\live-chat-app\\client\\src\\components\\Header\\index.js":"25","C:\\Users\\nicol\\bootcamp-class\\live-chat-app\\client\\src\\components\\Footer\\index.js":"26","C:\\Users\\nicol\\bootcamp-class\\live-chat-app\\client\\src\\utils\\queries.js":"27","C:\\Users\\nicol\\bootcamp-class\\live-chat-app\\client\\src\\utils\\mutations.js":"28","C:\\Users\\nicol\\bootcamp-class\\live-chat-app\\client\\src\\utils\\auth.js":"29","C:\\Users\\nicol\\bootcamp-class\\live-chat-app\\client\\src\\components\\Chatbox.js":"30","C:\\Users\\nicol\\bootcamp-class\\live-chat-app\\client\\src\\components\\Chatwindow.js":"31","C:\\Users\\nicol\\bootcamp-class\\live-chat-app\\client\\src\\components\\Footer\\ScrollToTop.js":"32","C:\\Users\\nicol\\bootcamp-class\\live-chat-app\\client\\src\\components\\Chat.js":"33"},{"size":517,"mtime":1635116964951,"results":"34","hashOfConfig":"35"},{"size":2246,"mtime":1635116964943,"results":"36","hashOfConfig":"35"},{"size":375,"mtime":1635116964956,"results":"37","hashOfConfig":"35"},{"size":1620,"mtime":1635116964955,"results":"38","hashOfConfig":"35"},{"size":2597,"mtime":1635725819556,"results":"39","hashOfConfig":"35"},{"size":2758,"mtime":1635116964954,"results":"40","hashOfConfig":"35"},{"size":944,"mtime":1635116964952,"results":"41","hashOfConfig":"35"},{"size":1790,"mtime":1635116964954,"results":"42","hashOfConfig":"35"},{"size":1368,"mtime":1635116964947,"results":"43","hashOfConfig":"35"},{"size":879,"mtime":1635116964946,"results":"44","hashOfConfig":"35"},{"size":968,"mtime":1635116964959,"results":"45","hashOfConfig":"35"},{"size":1084,"mtime":1635116964958,"results":"46","hashOfConfig":"35"},{"size":1133,"mtime":1635116964959,"results":"47","hashOfConfig":"35"},{"size":989,"mtime":1635116964945,"results":"48","hashOfConfig":"35"},{"size":2498,"mtime":1635116964944,"results":"49","hashOfConfig":"35"},{"size":3193,"mtime":1635116964948,"results":"50","hashOfConfig":"35"},{"size":1556,"mtime":1635116964949,"results":"51","hashOfConfig":"35"},{"size":567,"mtime":1635824181523,"results":"52","hashOfConfig":"53"},{"size":3737,"mtime":1636791737861,"results":"54","hashOfConfig":"53"},{"size":375,"mtime":1635116964956,"results":"55","hashOfConfig":"53"},{"size":2597,"mtime":1635725819556,"results":"56","hashOfConfig":"53"},{"size":1471,"mtime":1636795021716,"results":"57","hashOfConfig":"53"},{"size":2758,"mtime":1635116964954,"results":"58","hashOfConfig":"53"},{"size":3967,"mtime":1636782737453,"results":"59","hashOfConfig":"53"},{"size":1357,"mtime":1636789906535,"results":"60","hashOfConfig":"53"},{"size":1367,"mtime":1636591413792,"results":"61","hashOfConfig":"53"},{"size":755,"mtime":1636487064074,"results":"62","hashOfConfig":"53"},{"size":1083,"mtime":1636051685638,"results":"63","hashOfConfig":"53"},{"size":1084,"mtime":1635116964958,"results":"64","hashOfConfig":"53"},{"size":8801,"mtime":1636795147982,"results":"65","hashOfConfig":"53"},{"size":2947,"mtime":1636772094488,"results":"66","hashOfConfig":"53"},{"size":1001,"mtime":1636591356652,"results":"67","hashOfConfig":"53"},{"size":3993,"mtime":1636786935827,"results":"68","hashOfConfig":"53"},{"filePath":"69","messages":"70","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1vfdgy2",{"filePath":"71","messages":"72","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"73","messages":"74","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"75","messages":"76","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"77","messages":"78","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"79","messages":"80","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"81","messages":"82","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"83","messages":"84","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"85","messages":"86","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"87","messages":"88","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"89","messages":"90","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"91","messages":"92","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"93","messages":"94","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"95","messages":"96","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"97","messages":"98","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"99"},{"filePath":"100","messages":"101","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"102"},{"filePath":"103","messages":"104","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"105","messages":"106","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"107"},"uc24hd",{"filePath":"108","messages":"109","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"110","usedDeprecatedRules":"107"},{"filePath":"111","messages":"112","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"107"},{"filePath":"113","messages":"114","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"107"},{"filePath":"115","messages":"116","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"117"},{"filePath":"118","messages":"119","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"107"},{"filePath":"120","messages":"121","errorCount":0,"fatalErrorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"122","usedDeprecatedRules":"107"},{"filePath":"123","messages":"124","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"107"},{"filePath":"125","messages":"126","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"107"},{"filePath":"127","messages":"128","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"107"},{"filePath":"129","messages":"130","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"107"},{"filePath":"131","messages":"132","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"107"},{"filePath":"133","messages":"134","errorCount":0,"fatalErrorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"135"},{"filePath":"136","messages":"137","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"138","usedDeprecatedRules":"107"},{"filePath":"139","messages":"140","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"107"},{"filePath":"141","messages":"142","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"143","usedDeprecatedRules":"107"},"C:\\Users\\nicol\\bootcamp-class\\ur-rich-fsf-pt-05-2021-u-c\\21-MERN\\01-Activities\\26-Stu_Resolver-Context\\Solved\\client\\src\\index.js",[],"C:\\Users\\nicol\\bootcamp-class\\ur-rich-fsf-pt-05-2021-u-c\\21-MERN\\01-Activities\\26-Stu_Resolver-Context\\Solved\\client\\src\\App.js",[],"C:\\Users\\nicol\\bootcamp-class\\ur-rich-fsf-pt-05-2021-u-c\\21-MERN\\01-Activities\\26-Stu_Resolver-Context\\Solved\\client\\src\\reportWebVitals.js",[],"C:\\Users\\nicol\\bootcamp-class\\ur-rich-fsf-pt-05-2021-u-c\\21-MERN\\01-Activities\\26-Stu_Resolver-Context\\Solved\\client\\src\\pages\\SingleThought.js",[],"C:\\Users\\nicol\\bootcamp-class\\ur-rich-fsf-pt-05-2021-u-c\\21-MERN\\01-Activities\\26-Stu_Resolver-Context\\Solved\\client\\src\\pages\\Login.js",[],"C:\\Users\\nicol\\bootcamp-class\\ur-rich-fsf-pt-05-2021-u-c\\21-MERN\\01-Activities\\26-Stu_Resolver-Context\\Solved\\client\\src\\pages\\Signup.js",[],"C:\\Users\\nicol\\bootcamp-class\\ur-rich-fsf-pt-05-2021-u-c\\21-MERN\\01-Activities\\26-Stu_Resolver-Context\\Solved\\client\\src\\pages\\Home.js",[],"C:\\Users\\nicol\\bootcamp-class\\ur-rich-fsf-pt-05-2021-u-c\\21-MERN\\01-Activities\\26-Stu_Resolver-Context\\Solved\\client\\src\\pages\\Profile.js",[],"C:\\Users\\nicol\\bootcamp-class\\ur-rich-fsf-pt-05-2021-u-c\\21-MERN\\01-Activities\\26-Stu_Resolver-Context\\Solved\\client\\src\\components\\Header\\index.js",[],"C:\\Users\\nicol\\bootcamp-class\\ur-rich-fsf-pt-05-2021-u-c\\21-MERN\\01-Activities\\26-Stu_Resolver-Context\\Solved\\client\\src\\components\\Footer\\index.js",[],"C:\\Users\\nicol\\bootcamp-class\\ur-rich-fsf-pt-05-2021-u-c\\21-MERN\\01-Activities\\26-Stu_Resolver-Context\\Solved\\client\\src\\utils\\queries.js",[],"C:\\Users\\nicol\\bootcamp-class\\ur-rich-fsf-pt-05-2021-u-c\\21-MERN\\01-Activities\\26-Stu_Resolver-Context\\Solved\\client\\src\\utils\\auth.js",[],"C:\\Users\\nicol\\bootcamp-class\\ur-rich-fsf-pt-05-2021-u-c\\21-MERN\\01-Activities\\26-Stu_Resolver-Context\\Solved\\client\\src\\utils\\mutations.js",[],"C:\\Users\\nicol\\bootcamp-class\\ur-rich-fsf-pt-05-2021-u-c\\21-MERN\\01-Activities\\26-Stu_Resolver-Context\\Solved\\client\\src\\components\\CommentList\\index.js",[],"C:\\Users\\nicol\\bootcamp-class\\ur-rich-fsf-pt-05-2021-u-c\\21-MERN\\01-Activities\\26-Stu_Resolver-Context\\Solved\\client\\src\\components\\CommentForm\\index.js",["144"],"import React, { useState } from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport { useMutation } from '@apollo/client';\r\n\r\nimport { ADD_COMMENT } from '../../utils/mutations';\r\n\r\nimport Auth from '../../utils/auth';\r\n\r\nconst CommentForm = ({ thoughtId }) => {\r\n  const [commentText, setCommentText] = useState('');\r\n  const [characterCount, setCharacterCount] = useState(0);\r\n\r\n  const [addComment, { error }] = useMutation(ADD_COMMENT);\r\n\r\n  const handleFormSubmit = async (event) => {\r\n    event.preventDefault();\r\n\r\n    try {\r\n      const { data } = await addComment({\r\n        variables: {\r\n          thoughtId,\r\n          commentText,\r\n          commentAuthor: Auth.getProfile().data.username,\r\n        },\r\n      });\r\n\r\n      setCommentText('');\r\n    } catch (err) {\r\n      console.error(err);\r\n    }\r\n  };\r\n\r\n  const handleChange = (event) => {\r\n    const { name, value } = event.target;\r\n\r\n    if (name === 'commentText' && value.length <= 280) {\r\n      setCommentText(value);\r\n      setCharacterCount(value.length);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <h4>What are your thoughts on this thought?</h4>\r\n\r\n      {Auth.loggedIn() ? (\r\n        <>\r\n          <p\r\n            className={`m-0 ${\r\n              characterCount === 280 || error ? 'text-danger' : ''\r\n            }`}\r\n          >\r\n            Character Count: {characterCount}/280\r\n            {error && <span className=\"ml-2\">{error.message}</span>}\r\n          </p>\r\n          <form\r\n            className=\"flex-row justify-center justify-space-between-md align-center\"\r\n            onSubmit={handleFormSubmit}\r\n          >\r\n            <div className=\"col-12 col-lg-9\">\r\n              <textarea\r\n                name=\"commentText\"\r\n                placeholder=\"Add your comment...\"\r\n                value={commentText}\r\n                className=\"form-input w-100\"\r\n                style={{ lineHeight: '1.5', resize: 'vertical' }}\r\n                onChange={handleChange}\r\n              ></textarea>\r\n            </div>\r\n\r\n            <div className=\"col-12 col-lg-3\">\r\n              <button className=\"btn btn-primary btn-block py-3\" type=\"submit\">\r\n                Add Comment\r\n              </button>\r\n            </div>\r\n          </form>\r\n        </>\r\n      ) : (\r\n        <p>\r\n          You need to be logged in to share your thoughts. Please{' '}\r\n          <Link to=\"/login\">login</Link> or <Link to=\"/signup\">signup.</Link>\r\n        </p>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default CommentForm;\r\n","C:\\Users\\nicol\\bootcamp-class\\ur-rich-fsf-pt-05-2021-u-c\\21-MERN\\01-Activities\\26-Stu_Resolver-Context\\Solved\\client\\src\\components\\ThoughtForm\\index.js",["145"],"import React, { useState } from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport { useMutation } from '@apollo/client';\r\n\r\nimport { ADD_THOUGHT } from '../../utils/mutations';\r\nimport { QUERY_THOUGHTS, QUERY_ME } from '../../utils/queries';\r\n\r\nimport Auth from '../../utils/auth';\r\n\r\nconst ThoughtForm = () => {\r\n  const [thoughtText, setThoughtText] = useState('');\r\n\r\n  const [characterCount, setCharacterCount] = useState(0);\r\n\r\n  const [addThought, { error }] = useMutation(ADD_THOUGHT, {\r\n    update(cache, { data: { addThought } }) {\r\n      try {\r\n        const { thoughts } = cache.readQuery({ query: QUERY_THOUGHTS });\r\n\r\n        cache.writeQuery({\r\n          query: QUERY_THOUGHTS,\r\n          data: { thoughts: [addThought, ...thoughts] },\r\n        });\r\n      } catch (e) {\r\n        console.error(e);\r\n      }\r\n\r\n      // update me object's cache\r\n      const { me } = cache.readQuery({ query: QUERY_ME });\r\n      cache.writeQuery({\r\n        query: QUERY_ME,\r\n        data: { me: { ...me, thoughts: [...me.thoughts, addThought] } },\r\n      });\r\n    },\r\n  });\r\n\r\n  const handleFormSubmit = async (event) => {\r\n    event.preventDefault();\r\n\r\n    try {\r\n      const { data } = await addThought({\r\n        variables: {\r\n          thoughtText,\r\n          thoughtAuthor: Auth.getProfile().data.username,\r\n        },\r\n      });\r\n\r\n      setThoughtText('');\r\n    } catch (err) {\r\n      console.error(err);\r\n    }\r\n  };\r\n\r\n  const handleChange = (event) => {\r\n    const { name, value } = event.target;\r\n\r\n    if (name === 'thoughtText' && value.length <= 280) {\r\n      setThoughtText(value);\r\n      setCharacterCount(value.length);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <h3>What's on your techy mind?</h3>\r\n\r\n      {Auth.loggedIn() ? (\r\n        <>\r\n          <p\r\n            className={`m-0 ${\r\n              characterCount === 280 || error ? 'text-danger' : ''\r\n            }`}\r\n          >\r\n            Character Count: {characterCount}/280\r\n          </p>\r\n          <form\r\n            className=\"flex-row justify-center justify-space-between-md align-center\"\r\n            onSubmit={handleFormSubmit}\r\n          >\r\n            <div className=\"col-12 col-lg-9\">\r\n              <textarea\r\n                name=\"thoughtText\"\r\n                placeholder=\"Here's a new thought...\"\r\n                value={thoughtText}\r\n                className=\"form-input w-100\"\r\n                style={{ lineHeight: '1.5', resize: 'vertical' }}\r\n                onChange={handleChange}\r\n              ></textarea>\r\n            </div>\r\n\r\n            <div className=\"col-12 col-lg-3\">\r\n              <button className=\"btn btn-primary btn-block py-3\" type=\"submit\">\r\n                Add Thought\r\n              </button>\r\n            </div>\r\n            {error && (\r\n              <div className=\"col-12 my-3 bg-danger text-white p-3\">\r\n                {error.message}\r\n              </div>\r\n            )}\r\n          </form>\r\n        </>\r\n      ) : (\r\n        <p>\r\n          You need to be logged in to share your thoughts. Please{' '}\r\n          <Link to=\"/login\">login</Link> or <Link to=\"/signup\">signup.</Link>\r\n        </p>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ThoughtForm;\r\n","C:\\Users\\nicol\\bootcamp-class\\ur-rich-fsf-pt-05-2021-u-c\\21-MERN\\01-Activities\\26-Stu_Resolver-Context\\Solved\\client\\src\\components\\ThoughtList\\index.js",[],"C:\\Users\\nicol\\bootcamp-class\\live-chat-app\\client\\src\\index.js",[],["146","147"],"C:\\Users\\nicol\\bootcamp-class\\live-chat-app\\client\\src\\App.js",["148"],"import React, { useEffect, useState } from 'react';\r\nimport {\r\n  ApolloClient,\r\n  InMemoryCache,\r\n  ApolloProvider,\r\n  createHttpLink,\r\n} from '@apollo/client';\r\nimport { setContext } from '@apollo/client/link/context';\r\nimport { BrowserRouter as Router, Route } from 'react-router-dom';\r\nimport {Container, Toast} from 'react-bootstrap'\r\nimport io from 'socket.io-client'\r\n\r\nimport Home from './pages/Home';\r\nimport Signup from './pages/Signup';\r\nimport Login from './pages/Login';\r\nimport Profile from './pages/Profile';\r\nimport Header from './components/Header';\r\nimport Footer from './components/Footer';\r\n\r\n\r\n// Construct our main GraphQL API endpoint\r\nconst httpLink = createHttpLink({\r\n  uri: '/graphql',\r\n});\r\n\r\n// Construct request middleware that will attach the JWT token to every request as an `authorization` header\r\nconst authLink = setContext((_, { headers }) => {\r\n  // get the authentication token from local storage if it exists\r\n  const token = localStorage.getItem('id_token');\r\n  // return the headers to the context so httpLink can read them\r\n  return {\r\n    headers: {\r\n      ...headers,\r\n      authorization: token ? `Bearer ${token}` : '',\r\n    },\r\n  };\r\n});\r\n\r\nconst client = new ApolloClient({\r\n  // Set up our client to execute the `authLink` middleware prior to making the request to our GraphQL API\r\n  link: authLink.concat(httpLink),\r\n  cache: new InMemoryCache(),\r\n});\r\n\r\nconst socket = io.connect(\"/\")\r\n\r\nfunction App() {\r\n\r\n  const [displayChat, setDisplayChat] = useState([])\r\n  const [inbox, setInbox] = useState({})\r\n  const [show, setShow] = useState(true);\r\n\r\n  useEffect(() => {\r\n    socket.on(\"get_notification\", (data) => {\r\n      console.log(data)\r\n\r\n      setInbox(data)\r\n      setShow(true)\r\n\r\n      localStorage.setItem(`${data.room}-CurrentLength`, data.listSize)\r\n    })\r\n  },[socket])\r\n\r\n  return (\r\n    <ApolloProvider client={client}>\r\n      <Router>\r\n        <Container>\r\n          {/* {inbox !== {}? */}\r\n          {/* <Toast style ={{position:'fixed', top: '0', right: '0', marginTop:'10px', marginRight: '10px'}}>\r\n            <Toast.Header>\r\n              <img src=\"holder.js/20x20?text=%20\" className=\"rounded me-2\" alt=\"\" />\r\n              <strong className=\"me-auto\">{inbox.sender}</strong>\r\n              <small>{`room: ${inbox.room}`}</small>\r\n            </Toast.Header>\r\n            <Toast.Body>{inbox.message}</Toast.Body>\r\n          </Toast> */}\r\n          {/* :\r\n          <></>\r\n          } */}\r\n          <Header />\r\n          <div className=\"container\">\r\n            <Route exact path=\"/\">\r\n              <Home setDisplayChat={setDisplayChat} socket={socket}/>\r\n            </Route>\r\n            <Route exact path=\"/login\">\r\n              <Login />\r\n            </Route>\r\n            <Route exact path=\"/signup\">\r\n              <Signup />\r\n            </Route>\r\n            <Route exact path=\"/me\">\r\n              <Profile displayChat={displayChat} setDisplayChat={setDisplayChat} client={client} socket={socket}/>\r\n            </Route>\r\n          </div>\r\n          <Footer/>\r\n          {inbox.room !== undefined?(\r\n          <Toast style ={{position:'fixed', top: '0', right: '0', marginTop:'10px', marginRight: '10px'}} onClose={() => setShow(false)} show={show} delay={4000} autohide>\r\n            <Toast.Header>\r\n              <img src=\"holder.js/20x20?text=%20\" className=\"rounded me-2\" alt=\"\" />\r\n              <strong className=\"me-auto\">{inbox.sender}</strong>\r\n              <small>{`room: ${inbox.room}`}</small>\r\n            </Toast.Header>\r\n            <Toast.Body>{inbox.message}</Toast.Body>\r\n          </Toast>\r\n          ):(\r\n          <></>\r\n          )}\r\n         </Container>\r\n      </Router>\r\n    </ApolloProvider>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","C:\\Users\\nicol\\bootcamp-class\\live-chat-app\\client\\src\\reportWebVitals.js",[],"C:\\Users\\nicol\\bootcamp-class\\live-chat-app\\client\\src\\pages\\Login.js",[],"C:\\Users\\nicol\\bootcamp-class\\live-chat-app\\client\\src\\pages\\Home.js",["149","150","151","152"],"\r\nimport {  useMutation, useQuery } from '@apollo/client'\r\nimport { QUERY_ROOMS } from '../utils/queries'\r\nimport { ADD_ROOM } from '../utils/mutations'\r\nimport Chatwindow from '../components/Chatwindow'\r\nimport {Container, Button} from 'react-bootstrap'\r\nimport Auth from '../utils/auth';\r\nimport { useEffect } from 'react'\r\n\r\n\r\n\r\n\r\nconst Home = ({setDisplayChat, socket}) => {\r\n\r\n\r\n  const { loading, data } = useQuery(QUERY_ROOMS)\r\n  \r\n  const roomData = data?.rooms || {}\r\n\r\n  // useEffect(() => {\r\n  //   socket.emit('leave_rooms')\r\n  // },[])\r\n\r\n\r\n  // console.log(roomData)\r\n\r\n  if(Auth.loggedIn()){\r\n    const name = Auth.getProfile().data.username\r\n    // console.log(name)\r\n  \r\n  if (loading) {\r\n    return <div>Loading...</div>\r\n  }\r\n  \r\n  return (\r\n    <main>\r\n      <Container style={{display:'flex', flexWrap: 'wrap'}} >\r\n      {roomData.map((singleRoomData) => {\r\n        return (\r\n  \r\n          \r\n        <Container key={singleRoomData._id} style={{border: 'solid', width: '400px', marginTop:'3rem'}}>\r\n          <h1 style={{whiteSpace: 'nowrap', overflow: 'hidden', textOverflow:'ellipsis'}}> Room: {singleRoomData.roomname} </h1>\r\n\r\n          \r\n          <Chatwindow setDisplayChat={setDisplayChat} socket={socket} roomdata={singleRoomData} myName={name}/>\r\n        </Container>\r\n  \r\n        )\r\n      }\r\n        )}\r\n      </Container>\r\n    </main>\r\n  );\r\n  }\r\n  else{\r\n    return <div>please log in</div>\r\n  }\r\n\r\n\r\n\r\n\r\n};\r\n\r\nexport default Home;\r\n\r\n\r\n\r\n","C:\\Users\\nicol\\bootcamp-class\\live-chat-app\\client\\src\\pages\\Signup.js",[],"C:\\Users\\nicol\\bootcamp-class\\live-chat-app\\client\\src\\pages\\Profile.js",["153","154","155","156","157","158","159"],"import React, { useState, useRef, useEffect } from 'react';\r\nimport { v4 as uuidv4 } from 'uuid';\r\n\r\nimport { useMutation, useQuery } from '@apollo/client';\r\nimport { Container, Form, Button, Offcanvas, ListGroup, Badge } from 'react-bootstrap';\r\nimport Chatbox from '../components/Chatbox'\r\nimport Chat from '../components/Chat'\r\nimport Footer from '../components/Footer'\r\n\r\n\r\n\r\nimport { QUERY_ME, QUERY_ROOMS } from '../utils/queries';\r\n\r\nimport { ADD_ROOM } from '../utils/mutations';\r\n\r\nimport Auth from '../utils/auth';\r\n\r\n// window.location.reload();\r\n\r\nconst Profile = ({displayChat, setDisplayChat, client, socket}) => {\r\n  \r\n  let [room, setRoom] = useState([])\r\n\r\n  const [show, setShow] = useState(false);\r\n\r\n  const handleClose = () => setShow(false);\r\n  const handleShow = () => setShow(true);\r\n\r\n  \r\n  \r\n  client.writeQuery({\r\n    query: QUERY_ME,\r\n    data: { me: {rooms: room} },\r\n  });\r\n  \r\n  const { loading, data } = useQuery( QUERY_ME);\r\n\r\n  const user = data?.me || {};\r\n  \r\n  // console.log(user)\r\n  // console.log(user.rooms)\r\n  \r\n  const[addRoom] = useMutation(ADD_ROOM)\r\n  \r\n  const roomRef = useRef()\r\n\r\n  console.log(displayChat)\r\n  \r\n  \r\n  useEffect(()=>{\r\n\r\n    // console.log('calling room use effect')\r\n    \r\n    if(!loading){\r\n\r\n      setRoom(user.rooms)\r\n    }\r\n     \r\n  }, [user])\r\n  \r\n  // console.log(room)\r\n\r\n  const joinRoom = async () => {\r\n    \r\n    const joinData = {\r\n      name: user.username,\r\n      room: roomRef.current.value\r\n    }\r\n\r\n    if(roomRef.current.value.length > 0 && !room.includes(roomRef.current.value)){\r\n      \r\n      socket.emit(\"join_room\", joinData)\r\n      try {\r\n        const { data } = await addRoom({\r\n          variables: { roomname: roomRef.current.value }\r\n        })\r\n      } catch (err) {\r\n        console.error(err)\r\n      }\r\n      \r\n      setRoom((item)=> [ ...item, roomRef.current.value])\r\n      setDisplayChat((item) => {\r\n        const check = item.filter(el => el !== roomRef.current.value)\r\n        return [...check, roomRef.current.value]\r\n      })\r\n    }\r\n    // socket.emit(\"join_room\", joinData)\r\n\r\n\r\n  }\r\n\r\n  \r\n  // redirect to personal profile page if username is yours\r\n\r\n  if(Auth.loggedIn()){\r\n    const name = user.username\r\n\r\n  \r\n  if (loading) {\r\n    return <div>Loading...</div>\r\n  }\r\n  \r\n  return (\r\n    <Container >\r\n\r\n      <Container style={{display: 'flex', marginBottom:'1rem'}}>\r\n        <Form>\r\n          <Form.Group>\r\n            {/* <Form.Label>Enter a room name!</Form.Label> */}\r\n            <Form.Control placeholder='enter a room name' ref={roomRef} type=\"text\" required />\r\n          </Form.Group>\r\n        </Form>\r\n\r\n        <Button type=\"submit\" onClick={joinRoom}>Join</Button>\r\n        <Button style={{marginLeft:'10px'}} variant=\"primary\" onClick={handleShow}>\r\n        Room List\r\n        </Button>\r\n        \r\n      </Container>\r\n\r\n      <Offcanvas show={show} onHide={handleClose}>\r\n        <Offcanvas.Header closeButton>\r\n          <Offcanvas.Title>Your Rooms</Offcanvas.Title>\r\n        </Offcanvas.Header>\r\n        <Offcanvas.Body>\r\n        <ListGroup as=\"ul\">\r\n          {room.map((newroom) => {\r\n            return ( <Chat key={newroom} displayChat={displayChat} setDisplayChat={setDisplayChat} socket={socket} myName={user.username} room={newroom} rooms={user.rooms} setRoom={setRoom} client={client} />\r\n                )\r\n          })}\r\n\r\n        </ListGroup>\r\n        </Offcanvas.Body>\r\n        </Offcanvas>\r\n      <Container style={{ display: 'flex', flexWrap: 'wrap' }}>\r\n        {displayChat.map((newroom) => {\r\n          return (<Chatbox key={newroom} displayChat={displayChat} setDisplayChat={setDisplayChat} socket={socket} myName={user.username} room={newroom} rooms={room} setRoom={setRoom} client={client} />)\r\n\r\n        })}\r\n      </Container>\r\n\r\n      {/* <Footer room={room} myName={user.username} socket={socket}/> */}\r\n\r\n    </Container>\r\n  );\r\n  }\r\n  else{\r\n    return <div>please log in</div>\r\n  }\r\n}\r\nexport default Profile;\r\n","C:\\Users\\nicol\\bootcamp-class\\live-chat-app\\client\\src\\components\\Header\\index.js",[],"C:\\Users\\nicol\\bootcamp-class\\live-chat-app\\client\\src\\components\\Footer\\index.js",[],"C:\\Users\\nicol\\bootcamp-class\\live-chat-app\\client\\src\\utils\\queries.js",[],"C:\\Users\\nicol\\bootcamp-class\\live-chat-app\\client\\src\\utils\\mutations.js",[],"C:\\Users\\nicol\\bootcamp-class\\live-chat-app\\client\\src\\utils\\auth.js",[],"C:\\Users\\nicol\\bootcamp-class\\live-chat-app\\client\\src\\components\\Chatbox.js",["160","161","162","163","164","165","166","167","168"],"import React, {useEffect, useState, useRef} from 'react'\r\nimport {Container, InputGroup, FormControl, Button, CloseButton, Alert, DropdownButton, Dropdown} from 'react-bootstrap'\r\nimport { useMutation, useQuery } from '@apollo/client';\r\n\r\nimport { ADD_MESSAGE, REMOVE_ROOM } from '../utils/mutations';\r\nimport { QUERY_ROOMS, QUERY_ME, QUERY_ROOM } from '../utils/queries';\r\n\r\n\r\nfunction Chatbox({displayChat, setDisplayChat, socket, myName, room, rooms, setRoom, client}){\r\n\r\n    const joinData = {\r\n        room: room,\r\n        name: myName\r\n    }\r\n\r\n    \r\n\r\n    // console.log(`Welcome to room: ${room}, ${myName}`)\r\n\r\n    const { loading, data } = useQuery(QUERY_ROOM, {variables:{ roomname: room }})\r\n\r\n    const roomData = data?.room || {}\r\n\r\n    // console.log(roomData)\r\n\r\n    const [currentMessage, setCurrentMessage] = useState(\"\")\r\n    const [messageHistory, setMessageHistory] = useState([])\r\n    const [onlineUsers, setOnlineUsers] = useState([])\r\n    const [addMessage] = useMutation(ADD_MESSAGE)\r\n    const [removeRoom] = useMutation(REMOVE_ROOM)\r\n\r\n    // console.log(onlineUsers)\r\n\r\n    const sendMessage = async () => {\r\n\r\n        \r\n        setCurrentMessage('')\r\n        // console.log(currentMessage)\r\n        if (currentMessage !==\"\"){\r\n            const messageData = {\r\n                message: currentMessage,\r\n                sender: myName,\r\n                room: room,\r\n                listSize: messageHistory.length + 1\r\n            }\r\n            await socket.emit(\"send_message\", messageData)\r\n            if(messageData.room === room){\r\n            setMessageHistory((item)=>[...item, messageData])\r\n            }\r\n            try{ \r\n                console.log('attempting to save message...')\r\n                const { data } = await addMessage({\r\n                    variables: {\r\n                        message: currentMessage,\r\n                        sender: myName,\r\n                        roomname: room\r\n                    }\r\n                })\r\n            } catch(err) {\r\n                console.error(err)\r\n            }\r\n            client.writeQuery({\r\n                query: QUERY_ROOM,\r\n                variables: { roomname: roomData.roomname },\r\n                data: { room: {messages: messageHistory} },\r\n              });\r\n            \r\n            \r\n            \r\n        }\r\n    }\r\n\r\n    useEffect (()=> {\r\n        // console.log('socket use effect')\r\n        socket.on(\"get_message\", (data) => {\r\n            // console.log('messsage recieved')\r\n            if(data.room === room){\r\n                // console.log((item)=> \r\n                // [...item, data])\r\n                setMessageHistory((item)=> [...item, data])\r\n                client.writeQuery({\r\n                    query: QUERY_ROOM,\r\n                    variables: { roomname: roomData.roomname },\r\n                    data: { room: {messages: messageHistory} },\r\n                  });\r\n\r\n                \r\n\r\n            }\r\n\r\n        })\r\n\r\n\r\n    }, [socket])\r\n\r\n    useEffect (()=> {\r\n        // console.log('room data use effect')\r\n\r\n        // console.log(roomData)\r\n\r\n\r\n        if(!loading){\r\n            // const previousMessages = roomData.filter(el => el.roomname === room)\r\n            // console.log(previousMessages)\r\n            // if(roomData){\r\n                setMessageHistory(roomData.messages)\r\n            // }\r\n            // console.log(messageHistory)\r\n        }\r\n\r\n        \r\n\r\n        \r\n    }, [roomData])\r\n\r\n    const dummyDiv = useRef(null)\r\n\r\n    useEffect(() => {\r\n        // console.log('scroll effect')\r\n        dummyDiv.current?.scrollIntoView({behavior: 'smooth'})\r\n    }, [messageHistory])\r\n\r\n    useEffect(() => {\r\n\r\n        if(displayChat.includes(room)){\r\n\r\n            console.log(displayChat)\r\n\r\n        socket.on(\"ping_room\", (data) => {\r\n\r\n            if(data.roomname === room){\r\n\r\n                setOnlineUsers((item) => {\r\n                    console.log(item)\r\n                    const check = item.filter(el => el.socketID !== data.socketID)\r\n                    console.log(check, data)\r\n    \r\n                    return [...check, data]\r\n                })\r\n                joinData[\"socketID\"] = data.socketID\r\n                socket.emit(\"return_ping\", joinData)\r\n            }\r\n\r\n\r\n            \r\n        })\r\n        }\r\n\r\n        if(displayChat.includes(room)){\r\n\r\n        socket.on(\"online_users\", (data) => {\r\n\r\n            if(data.roomname === room){\r\n\r\n                setOnlineUsers((item) => {\r\n                    console.log(item)\r\n                    const check = item.filter(el => el.socketID !== data.socketID)\r\n                    console.log(check, data)\r\n    \r\n                    return [...check, data]\r\n                })\r\n            }\r\n\r\n        })\r\n    }\r\n\r\n        socket.on(\"disconnected_users\", (data) => {\r\n            console.log('user disconnected')\r\n            console.log(`User with socketID: ${data} disconnected`)\r\n\r\n            \r\n            const newOnlineUsers = onlineUsers.filter(el => el.socketID !== data)\r\n            setOnlineUsers((item) => {\r\n                const check = item.filter(el => el.socketID !== data)\r\n                return check\r\n            })\r\n            \r\n        })\r\n\r\n    },[socket])\r\n\r\n\r\n    const handleDelete = async () => {\r\n\r\n        setDisplayChat((item) => {\r\n            const check = item.filter(el => el !== room)\r\n            return check\r\n        })\r\n\r\n        socket.emit(\"ping_leave\", joinData)\r\n\r\n        localStorage.setItem(`${room}-MessageLength`, messageHistory.length)\r\n        localStorage.setItem(`${room}-CurrentLength`, messageHistory.length)\r\n\r\n    }\r\n\r\n    useEffect(() => {\r\n        console.log(`user: ${joinData.name}, joining room: ${joinData.room}`)\r\n        socket.emit(\"init_ping\", joinData)\r\n    },[rooms])\r\n\r\n    return(\r\n\r\n        <Container style={{width:'400px'}} className=\"block-example border border-dark\">\r\n\r\n            <Container style={{display:'flex', justifyContent: 'space-between', alignItems: 'center'}}>\r\n                <h3>Room : {room}</h3>\r\n                <CloseButton onClick={handleDelete} />\r\n            </Container>\r\n\r\n            <DropdownButton variant={onlineUsers.length > 0 ?'success':'secondary'} id=\"dropdown-basic-button\" title={onlineUsers.length === 0 ? 'No Users Online' : `Online Users: (${onlineUsers.length})`}>\r\n                {onlineUsers.map((user) => {\r\n                    return (\r\n                        <Dropdown.Item key={user.socketID}> 🟢 -  {user.username}</Dropdown.Item>\r\n                    )\r\n                })}\r\n            </DropdownButton>\r\n\r\n            \r\n            <Container style={{height: '400px', overflowY:'auto'}}>\r\n                {messageHistory.map((item)=>{\r\n                    return (\r\n                        <div key={item._id} style={ item.sender === myName ? { display:'flex', justifyContent: 'right'} : {display:'flex', justifyContent: 'left'}}>\r\n                            { item.sender === myName? \r\n                            <Alert ref={dummyDiv} style={{padding:'.5rem', paddingBottom:'0px', minWidth:'90px', maxWidth:'180px'}} variant={'success'}>\r\n                                <h4 style={{fontSize: '1rem', fontWeight:'bolder', whiteSpace: 'nowrap', overflow: 'hidden', textOverflow:'ellipsis'}}>{item.sender}</h4>\r\n                                <p>{item.message}</p>\r\n                            </Alert>\r\n                            :\r\n                            <Alert ref={dummyDiv} style={{padding:'.5rem', paddingBottom:'0px', minWidth:'90px', maxWidth:'180px'}} variant={'info'}>\r\n                                <h4 style={{fontSize: '1rem', fontWeight:'bolder', whiteSpace: 'nowrap', overflow: 'hidden', textOverflow:'ellipsis'}}>{item.sender}</h4>\r\n                                <p>{item.message}</p>\r\n                            </Alert>\r\n                            }\r\n                        </div>\r\n                    )\r\n                })}\r\n\r\n            </Container>\r\n\r\n            <Container>\r\n                <InputGroup className=\"mb-3\">\r\n                    <FormControl\r\n                        onChange={(event)=>{setCurrentMessage(event.target.value)}}\r\n                        placeholder=\"Type your message here\"\r\n                        aria-label=\"message\"\r\n                        aria-describedby=\"basic-addon2\"\r\n                        value = {currentMessage}\r\n                        onKeyPress = {(event) => {event.key === 'Enter' && sendMessage()}}\r\n                    />\r\n                    <Button \r\n                    onClick = {sendMessage}\r\n                    variant=\"outline-secondary\" id=\"button-addon2\">\r\n                        send\r\n                    </Button>\r\n                </InputGroup>\r\n            </Container>\r\n\r\n        </Container>\r\n\r\n    )\r\n}\r\n\r\nexport default Chatbox","C:\\Users\\nicol\\bootcamp-class\\live-chat-app\\client\\src\\components\\Chatwindow.js",["169","170"],"import React ,{useEffect, useRef } from 'react';\r\nimport {Container, Alert, Button} from 'react-bootstrap'\r\nimport { Link } from 'react-router-dom';\r\nimport { ADD_ROOM } from '../utils/mutations';\r\nimport { useMutation, useQuery } from '@apollo/client';\r\nimport { QUERY_ME } from '../utils/queries';\r\n\r\nconst Chatwindow = ({setDisplayChat, socket, roomdata, myName}) => {\r\n    // console.log(roomdata.messages)\r\n\r\n    const { loading, data } = useQuery( QUERY_ME);\r\n\r\n    const user = data?.me || {};\r\n  \r\n\r\n    const [addRoom] = useMutation(ADD_ROOM)\r\n\r\n    const messageHistory = roomdata.messages\r\n\r\n    // console.log(messageHistory)\r\n\r\n    const dummyDiv = useRef(null)\r\n\r\n    const joinThisRoom = async () => {\r\n\r\n        const joinData = {\r\n            name: myName,\r\n            room: roomdata.roomname\r\n          }\r\n\r\n        socket.emit(\"join_room\", joinData)\r\n        // socket.emit(\"init_ping\", joinData)\r\n\r\n        if(!user.rooms.includes(roomdata.roomname)){\r\n            try {\r\n                const { data } = await addRoom({\r\n                    variables: { roomname: roomdata.roomname }\r\n                })\r\n            } catch (err) {\r\n                console.error(err)\r\n            }\r\n        }\r\n\r\n        setDisplayChat((item) => {\r\n            const check = item.filter(el => el !== roomdata.roomname)\r\n            return [...check, roomdata.roomname]\r\n        })\r\n\r\n    }\r\n\r\n    useEffect(() => {\r\n        dummyDiv.current?.scrollIntoView()\r\n    })\r\n\r\n  return (\r\n\r\n    <Container>\r\n        <Link to='/me'>\r\n          <Button\r\n          onClick = {joinThisRoom}\r\n          >Join!\r\n          </Button>\r\n        </Link>\r\n    \r\n        <Container style={{height: '400px', overflowY:'auto'}}>\r\n                {messageHistory.map((item)=>{\r\n                    return (\r\n                        <div key={item._id} style={ item.sender === myName ? { display:'flex', justifyContent: 'right'} : {display:'flex', justifyContent: 'left'}}>\r\n                            { item.sender === myName? \r\n                            <Alert ref={dummyDiv} style={{padding:'.5rem', paddingBottom:'0px', minWidth:'90px', maxWidth:'180px'}} variant={'success'}>\r\n                                <h4 style={{fontSize: '1rem', fontWeight:'bolder'}}>{item.sender}</h4>\r\n                                <p>{item.message}</p>\r\n                            </Alert>\r\n                            :\r\n                            <Alert ref={dummyDiv} style={{padding:'.5rem', paddingBottom:'0px', minWidth:'90px', maxWidth:'180px'}} variant={'info'}>\r\n                                <h4 style={{fontSize: '1rem', fontWeight:'bolder'}}>{item.sender}</h4>\r\n                                <p>{item.message}</p>\r\n                            </Alert>\r\n                            }\r\n                        </div>\r\n                    )\r\n                })}\r\n\r\n            </Container>\r\n\r\n      </Container>\r\n    \r\n  );\r\n\r\n};\r\n\r\nexport default Chatwindow;","C:\\Users\\nicol\\bootcamp-class\\live-chat-app\\client\\src\\components\\Footer\\ScrollToTop.js",[],"C:\\Users\\nicol\\bootcamp-class\\live-chat-app\\client\\src\\components\\Chat.js",["171","172","173","174","175","176"],"import { useEffect, useState } from 'react'\r\nimport {  useMutation, useQuery } from '@apollo/client'\r\nimport { QUERY_ROOM } from '../utils/queries'\r\nimport { REMOVE_ROOM } from '../utils/mutations'\r\nimport {Container, Button, ListGroup, Badge} from 'react-bootstrap'\r\nimport { LocalState } from '@apollo/client/core/LocalState'\r\n\r\n\r\nconst Chat = ({displayChat, setDisplayChat, socket, myName, room, rooms, setRoom, client}) => {\r\n\r\n    const { loading, data, refetch } = useQuery(QUERY_ROOM, {variables:{ roomname: room }})\r\n\r\n    const roomData = data?.room || {}\r\n    console.log(roomData)\r\n\r\n    // if(!loading){\r\n\r\n    //     localStorage.setItem(`${room}-initCurrentLength`, roomData.messages.length)\r\n    // }\r\n\r\n\r\n    const [removeRoom] = useMutation(REMOVE_ROOM)\r\n\r\n    const [notifications, setNotifications] = useState(0)\r\n\r\n    const joinData = {\r\n        name: myName,\r\n        room: room\r\n      }\r\n\r\n    const openChat = () => {\r\n\r\n        refetch()\r\n\r\n\r\n        // socket.emit(\"join_room\", joinData)\r\n\r\n        setDisplayChat((item) => {\r\n\r\n            const check = item.filter(el => el !== room)\r\n            return [...check, room]\r\n        })\r\n        // socket.emit(\"init_ping\", joinData)\r\n        setNotifications(0)\r\n    }\r\n\r\n    const leaveChat = async () => {\r\n\r\n        const newRooms = rooms.filter(el => el !== room)\r\n        // console.log(newRooms)\r\n        setRoom(newRooms)\r\n        console.log('leaving room')\r\n        socket.emit(\"leave_room\", joinData)\r\n        try{ \r\n            // console.log('attempting to deleete room...')\r\n            const { data } = await removeRoom({\r\n                variables: {\r\n                    roomname: room\r\n                }\r\n            })\r\n        } catch(err) {\r\n            console.error(err)\r\n        }\r\n\r\n        setDisplayChat((item) => {\r\n            const check = item.filter(el => el !== room)\r\n            return check\r\n        })\r\n\r\n    }\r\n \r\n    \r\n\r\n    useEffect(() => {\r\n        socket.emit(\"join_room\", joinData)\r\n    },[])\r\n\r\n    useEffect(() => {\r\n\r\n        socket.on(\"get_notification\", (data) => {\r\n            if (data.room === room) {\r\n                if (!displayChat.includes(room)) {\r\n\r\n                    localStorage.setItem(`${room}-CurrentLength`, data.listSize)\r\n                    console.log('recieved message for notification')\r\n\r\n                    console.log(localStorage.getItem(`${room}-CurrentLength`))\r\n\r\n                    setNotifications((item) => {\r\n                        return item + 1\r\n                    })\r\n                }\r\n            }\r\n        })\r\n    }, [socket])\r\n\r\n    useEffect(() => {\r\n\r\n\r\n        if(!displayChat.includes(room)){\r\n            \r\n            const index = localStorage.getItem(`${room}-CurrentLength`)\r\n            const previous = localStorage.getItem(`${room}-MessageLength`)\r\n \r\n\r\n            if(!loading && roomData.messages.length > index){\r\n                console.log('test')\r\n                setNotifications(roomData.messages.length - previous)\r\n            }\r\n\r\n\r\n            else{\r\n\r\n                setNotifications(index - previous)\r\n            }\r\n            \r\n        }\r\n        // setNotifications(0)\r\n        \r\n    }, [loading])\r\n\r\n    if(!loading)\r\n\r\n    return (\r\n        <ListGroup.Item\r\n            as=\"li\"\r\n            className=\"d-flex justify-content-between align-items-start\"\r\n        >\r\n            <div className=\"ms-2 me-auto\">\r\n                <div className=\"fw-bold\">{room}</div>\r\n                <Button\r\n                onClick={openChat}\r\n                >join chat\r\n                </Button>\r\n                <Button\r\n                onClick={leaveChat}\r\n                variant=\"danger\"\r\n                style={{marginLeft:'10px'}}\r\n                >leave chat\r\n                </Button>\r\n            </div>\r\n            <Badge variant=\"primary\" pill>\r\n                {notifications}\r\n            </Badge>\r\n        </ListGroup.Item>\r\n    )\r\n\r\n    return <h>loading...</h>\r\n\r\n};\r\n\r\nexport default Chat;",{"ruleId":"177","severity":1,"message":"178","line":19,"column":15,"nodeType":"179","messageId":"180","endLine":19,"endColumn":19},{"ruleId":"177","severity":1,"message":"178","line":41,"column":15,"nodeType":"179","messageId":"180","endLine":41,"endColumn":19},{"ruleId":"181","replacedBy":"182"},{"ruleId":"183","replacedBy":"184"},{"ruleId":"185","severity":1,"message":"186","line":62,"column":5,"nodeType":"187","endLine":62,"endColumn":13,"suggestions":"188"},{"ruleId":"177","severity":1,"message":"189","line":2,"column":11,"nodeType":"179","messageId":"180","endLine":2,"endColumn":22},{"ruleId":"177","severity":1,"message":"190","line":4,"column":10,"nodeType":"179","messageId":"180","endLine":4,"endColumn":18},{"ruleId":"177","severity":1,"message":"191","line":6,"column":20,"nodeType":"179","messageId":"180","endLine":6,"endColumn":26},{"ruleId":"177","severity":1,"message":"192","line":8,"column":10,"nodeType":"179","messageId":"180","endLine":8,"endColumn":19},{"ruleId":"177","severity":1,"message":"193","line":2,"column":16,"nodeType":"179","messageId":"180","endLine":2,"endColumn":22},{"ruleId":"177","severity":1,"message":"194","line":5,"column":57,"nodeType":"179","messageId":"180","endLine":5,"endColumn":62},{"ruleId":"177","severity":1,"message":"195","line":8,"column":8,"nodeType":"179","messageId":"180","endLine":8,"endColumn":14},{"ruleId":"177","severity":1,"message":"196","line":12,"column":20,"nodeType":"179","messageId":"180","endLine":12,"endColumn":31},{"ruleId":"185","severity":1,"message":"197","line":59,"column":6,"nodeType":"187","endLine":59,"endColumn":12,"suggestions":"198"},{"ruleId":"177","severity":1,"message":"178","line":74,"column":17,"nodeType":"179","messageId":"180","endLine":74,"endColumn":21},{"ruleId":"177","severity":1,"message":"199","line":96,"column":11,"nodeType":"179","messageId":"180","endLine":96,"endColumn":15},{"ruleId":"177","severity":1,"message":"196","line":6,"column":10,"nodeType":"179","messageId":"180","endLine":6,"endColumn":21},{"ruleId":"177","severity":1,"message":"200","line":6,"column":23,"nodeType":"179","messageId":"180","endLine":6,"endColumn":31},{"ruleId":"177","severity":1,"message":"201","line":30,"column":12,"nodeType":"179","messageId":"180","endLine":30,"endColumn":22},{"ruleId":"177","severity":1,"message":"178","line":52,"column":25,"nodeType":"179","messageId":"180","endLine":52,"endColumn":29},{"ruleId":"185","severity":1,"message":"202","line":94,"column":8,"nodeType":"187","endLine":94,"endColumn":16,"suggestions":"203"},{"ruleId":"185","severity":1,"message":"197","line":114,"column":8,"nodeType":"187","endLine":114,"endColumn":18,"suggestions":"204"},{"ruleId":"177","severity":1,"message":"205","line":172,"column":19,"nodeType":"179","messageId":"180","endLine":172,"endColumn":33},{"ruleId":"185","severity":1,"message":"206","line":180,"column":7,"nodeType":"187","endLine":180,"endColumn":15,"suggestions":"207"},{"ruleId":"185","severity":1,"message":"208","line":200,"column":7,"nodeType":"187","endLine":200,"endColumn":14,"suggestions":"209"},{"ruleId":"177","severity":1,"message":"210","line":11,"column":13,"nodeType":"179","messageId":"180","endLine":11,"endColumn":20},{"ruleId":"177","severity":1,"message":"178","line":36,"column":25,"nodeType":"179","messageId":"180","endLine":36,"endColumn":29},{"ruleId":"177","severity":1,"message":"211","line":5,"column":9,"nodeType":"179","messageId":"180","endLine":5,"endColumn":18},{"ruleId":"177","severity":1,"message":"212","line":6,"column":10,"nodeType":"179","messageId":"180","endLine":6,"endColumn":20},{"ruleId":"177","severity":1,"message":"178","line":56,"column":21,"nodeType":"179","messageId":"180","endLine":56,"endColumn":25},{"ruleId":"185","severity":1,"message":"208","line":76,"column":7,"nodeType":"187","endLine":76,"endColumn":9,"suggestions":"213"},{"ruleId":"185","severity":1,"message":"214","line":95,"column":8,"nodeType":"187","endLine":95,"endColumn":16,"suggestions":"215"},{"ruleId":"185","severity":1,"message":"216","line":120,"column":8,"nodeType":"187","endLine":120,"endColumn":17,"suggestions":"217"},"no-unused-vars","'data' is assigned a value but never used.","Identifier","unusedVar","no-native-reassign",["218"],"no-negated-in-lhs",["219"],"react-hooks/exhaustive-deps","React Hook useEffect has an unnecessary dependency: 'socket'. Either exclude it or remove the dependency array. Outer scope values like 'socket' aren't valid dependencies because mutating them doesn't re-render the component.","ArrayExpression",["220"],"'useMutation' is defined but never used.","'ADD_ROOM' is defined but never used.","'Button' is defined but never used.","'useEffect' is defined but never used.","'uuidv4' is defined but never used.","'Badge' is defined but never used.","'Footer' is defined but never used.","'QUERY_ROOMS' is defined but never used.","React Hook useEffect has a missing dependency: 'loading'. Either include it or remove the dependency array.",["221"],"'name' is assigned a value but never used.","'QUERY_ME' is defined but never used.","'removeRoom' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'client', 'messageHistory', 'room', and 'roomData.roomname'. Either include them or remove the dependency array.",["222"],["223"],"'newOnlineUsers' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'displayChat', 'joinData', 'onlineUsers', and 'room'. Either include them or remove the dependency array.",["224"],"React Hook useEffect has missing dependencies: 'joinData' and 'socket'. Either include them or remove the dependency array.",["225"],"'loading' is assigned a value but never used.","'Container' is defined but never used.","'LocalState' is defined but never used.",["226"],"React Hook useEffect has missing dependencies: 'displayChat' and 'room'. Either include them or remove the dependency array.",["227"],"React Hook useEffect has missing dependencies: 'displayChat', 'room', and 'roomData.messages.length'. Either include them or remove the dependency array.",["228"],"no-global-assign","no-unsafe-negation",{"desc":"229","fix":"230"},{"desc":"231","fix":"232"},{"desc":"233","fix":"234"},{"desc":"235","fix":"236"},{"desc":"237","fix":"238"},{"desc":"239","fix":"240"},{"desc":"241","fix":"242"},{"desc":"243","fix":"244"},{"desc":"245","fix":"246"},"Update the dependencies array to be: []",{"range":"247","text":"248"},"Update the dependencies array to be: [loading, user]",{"range":"249","text":"250"},"Update the dependencies array to be: [client, messageHistory, room, roomData.roomname, socket]",{"range":"251","text":"252"},"Update the dependencies array to be: [loading, roomData]",{"range":"253","text":"254"},"Update the dependencies array to be: [displayChat, joinData, onlineUsers, room, socket]",{"range":"255","text":"256"},"Update the dependencies array to be: [joinData, rooms, socket]",{"range":"257","text":"258"},"Update the dependencies array to be: [joinData, socket]",{"range":"259","text":"260"},"Update the dependencies array to be: [displayChat, room, socket]",{"range":"261","text":"262"},"Update the dependencies array to be: [displayChat, loading, room, roomData.messages.length]",{"range":"263","text":"264"},[1824,1832],"[]",[1307,1313],"[loading, user]",[2971,2979],"[client, messageHistory, room, roomData.roomname, socket]",[3437,3447],"[loading, roomData]",[5207,5215],"[displayChat, joinData, onlineUsers, room, socket]",[5764,5771],"[joinData, rooms, socket]",[2007,2009],"[joinData, socket]",[2587,2595],"[displayChat, room, socket]",[3189,3198],"[displayChat, loading, room, roomData.messages.length]"]